name: Docker Build, Scan, Test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - "**"
    types:
      - labeled
      - opened
      - synchronize
      - reopened
  release:
    types: [published]

concurrency:
  # Using `github.run_id` (unique val) instead of `github.ref` here
  # because we don't want to cancel this workflow on master only for PRs
  #   as that makes reproducing issues easier
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  DATAHUB_FRONTEND_IMAGE: "phuchung276/datahub-frontend-react-ghn"
  DATAHUB_INGESTION_BASE_IMAGE: "phuchung276/datahub-ingestion-base-ghn"
  DATAHUB_INGESTION_IMAGE: "phuchung276/datahub-ingestion-ghn"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      slim_tag: ${{ steps.tag.outputs.slim_tag }}
      full_tag: ${{ steps.tag.outputs.full_tag }}
      unique_tag: ${{ steps.tag.outputs.unique_tag }}
      unique_slim_tag: ${{ steps.tag.outputs.unique_slim_tag }}
      unique_full_tag: ${{ steps.tag.outputs.unique_full_tag }}
      docker-login: ${{ steps.docker-login.outputs.docker-login }}
      publish: ${{ steps.publish.outputs.publish }}
      pr-publish: ${{ steps.pr-publish.outputs.publish }}
      python_release_version: ${{ steps.tag.outputs.python_release_version }}
      short_sha: ${{ steps.tag.outputs.short_sha }}
      branch_name: ${{ steps.tag.outputs.branch_name }}
      repository_name: ${{ steps.tag.outputs.repository_name }}
      frontend_change: ${{ steps.ci-optimize.outputs.frontend-change == 'true' }}
      ingestion_change: ${{ steps.ci-optimize.outputs.ingestion-change == 'true' }}
      backend_change: ${{ steps.ci-optimize.outputs.backend-change == 'true' }}
      frontend_only: ${{ steps.ci-optimize.outputs.frontend-only == 'true' }}
      ingestion_only: ${{ steps.ci-optimize.outputs.ingestion-only == 'true' }}
      backend_only: ${{ steps.ci-optimize.outputs.backend-only == 'true' }}
      kafka_setup_change: ${{ steps.ci-optimize.outputs.kafka-setup-change == 'true' }}
      mysql_setup_change: ${{ steps.ci-optimize.outputs.mysql-setup-change == 'true' }}
      postgres_setup_change: ${{ steps.ci-optimize.outputs.postgres-setup-change == 'true' }}
      elasticsearch_setup_change: ${{ steps.ci-optimize.outputs.elasticsearch-setup-change == 'true' }}
    steps:
      - name: Check out the repo
        uses: acryldata/sane-checkout-action@v3
      - name: Compute Tag
        id: tag
        run: |
          source .github/scripts/docker_helpers.sh
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "tag=$(get_tag)" >> $GITHUB_OUTPUT
          echo "slim_tag=$(get_tag_slim)" >> $GITHUB_OUTPUT
          echo "full_tag=$(get_tag_full)" >> $GITHUB_OUTPUT
          echo "unique_tag=$(get_unique_tag)" >> $GITHUB_OUTPUT
          echo "unique_slim_tag=$(get_unique_tag_slim)" >> $GITHUB_OUTPUT
          echo "unique_full_tag=$(get_unique_tag_full)" >> $GITHUB_OUTPUT
          echo "python_release_version=$(get_python_docker_release_v)" >> $GITHUB_OUTPUT
          echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "repository_name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      - name: Check whether docker login is possible
        id: docker-login
        env:
          ENABLE_DOCKER_LOGIN: ${{ secrets.DOCKER_PASSWORD != '' }}
        run: |
          echo "Enable Docker Login: ${{ env.ENABLE_DOCKER_LOGIN }}"
          echo "docker-login=${{ env.ENABLE_DOCKER_LOGIN }}" >> $GITHUB_OUTPUT
      - name: Check whether publishing enabled
        id: publish
        env:
          ENABLE_PUBLISH: >-
             ${{
                github.event_name != 'pull_request'
                && ( secrets.DOCKER_PASSWORD != '' )
             }}
        run: |
          echo "Enable publish: ${{ env.ENABLE_PUBLISH }}"
          echo "publish=${{ env.ENABLE_PUBLISH }}" >> $GITHUB_OUTPUT
      - name: Check whether PR publishing enabled
        id: pr-publish
        env:
          ENABLE_PUBLISH: >-
             ${{
                (github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'publish') || contains(github.event.pull_request.labels.*.name, 'publish-docker')))
                && ( secrets.DOCKER_PASSWORD != '' )
             }}
        run: |
          echo "Enable PR publish: ${{ env.ENABLE_PUBLISH }}"
          echo "publish=${{ env.ENABLE_PUBLISH }}" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/ci-optimization
        id: ci-optimize
      - uses: actions/setup-python@v4
        if: ${{ steps.ci-optimize.outputs.smoke-test-change == 'true' }}
        with:
          python-version: "3.10"
          cache: "pip"
      - uses: actions/cache@v4
        if: ${{ steps.ci-optimize.outputs.smoke-test-change == 'true' }}
        with:
          path: |
            ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: ${{ steps.ci-optimize.outputs.smoke-test-change == 'true' }}
        with:
          distribution: "zulu"
          java-version: 17
      - uses: gradle/gradle-build-action@v2
      - name: Run lint on smoke test
        if: ${{ steps.ci-optimize.outputs.smoke-test-change == 'true' }}
        run: |
          python ./.github/scripts/check_python_package.py
          ./gradlew :smoke-test:lint
  frontend_build:
    name: Build and Push DataHub Frontend Docker Image
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.frontend_change == 'true' || needs.setup.outputs.publish == 'true' }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 17
      - uses: gradle/gradle-build-action@v2
      - name: Check out the repo
        uses: acryldata/sane-checkout-action@v3
      - name: Pre-build artifacts for docker image
        run: |
          ./gradlew :datahub-frontend:dist -x test -x yarnTest -x yarnLint --parallel
          mv ./datahub-frontend/build/distributions/datahub-frontend-*.zip datahub-frontend.zip
        env:
          NODE_OPTIONS: "--max-old-space-size=3072"
      - name: Build and push
        uses: ./.github/actions/docker-custom-build-and-push
        with:
          images: |
            ${{ env.DATAHUB_FRONTEND_IMAGE }}
          tags: ${{ needs.setup.outputs.tag }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          publish: ${{ needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
          context: .
          file: ./docker/datahub-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
  frontend_scan:
    name: "[Monitoring] Scan Frontend images for vulnerabilities"
    runs-on: ubuntu-latest
    needs: [setup, frontend_build]
    if: ${{ needs.setup.outputs.frontend_change == 'true' || needs.setup.outputs.publish == 'true' }}
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout # adding checkout step just to make trivy upload happy
        uses: actions/checkout@v3
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        if: ${{ needs.setup.outputs.publish != 'true' && needs.setup.outputs.pr-publish != 'true' }}
        with:
          image: ${{ env.DATAHUB_FRONTEND_IMAGE }}:${{ needs.setup.outputs.unique_tag }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.8.0
        env:
          TRIVY_OFFLINE_SCAN: true
        with:
          image-ref: ${{ env.DATAHUB_FRONTEND_IMAGE }}:${{ needs.setup.outputs.unique_tag }}
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true
          vuln-type: "os,library"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
  datahub_ingestion_base_build:
    name: Build and Push DataHub Ingestion (Base) Docker Image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    needs: setup
    if: ${{ needs.setup.outputs.ingestion_change == 'true' || needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
    steps:
    - name: Free up disk space
      run: |
        sudo apt-get remove 'dotnet-*' azure-cli || true
        sudo rm -rf /usr/local/lib/android/ || true
        sudo docker image prune -a -f || true
    - name: Check out the repo
      uses: acryldata/sane-checkout-action@v3
    - name: Build and push Base Image
      if: ${{ needs.setup.outputs.ingestion_base_change == 'true' }}
      uses: ./.github/actions/docker-custom-build-and-push
      with:
        target: base
        images: |
          ${{ env.DATAHUB_INGESTION_BASE_IMAGE }}
        image_tag: ${{ needs.setup.outputs.tag }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        publish: ${{ needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
        context: .
        file: ./docker/datahub-ingestion-base/Dockerfile
        platforms: linux/amd64,linux/arm64/v8
        depot-project: ${{ vars.DEPOT_PROJECT_ID }}
    - name: Compute DataHub Ingestion (Base) Tag
      id: tag
      run: echo "tag=${{ needs.setup.outputs.ingestion_base_change == 'true' && needs.setup.outputs.unique_tag || 'head' }}" >> "$GITHUB_OUTPUT"
  datahub_ingestion_full_build:
    name: Build and Push DataHub Ingestion (Full) Docker Images
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      needs_artifact_download: ${{ needs.setup.outputs.ingestion_change == 'true' && ( needs.setup.outputs.publish != 'true' && needs.setup.outputs.pr-publish != 'true' ) }}
    needs: [ setup, datahub_ingestion_base_full_build ]
    if: ${{ needs.setup.outputs.ingestion_change == 'true' || needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
    steps:
    - name: Free up disk space
      run: |
        sudo apt-get remove 'dotnet-*' azure-cli || true
        sudo rm -rf /usr/local/lib/android/ || true
        sudo docker image prune -a -f || true
    - name: Check out the repo
      uses: acryldata/sane-checkout-action@v3
    - uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: "pip"
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: "zulu"
        java-version: 17
    - uses: gradle/actions/setup-gradle@v3
    - name: Build codegen
      if: ${{ needs.setup.outputs.ingestion_change == 'true' || needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
      run: ./gradlew :metadata-ingestion:codegen
    - name: Download Base Image
      uses: ishworkh/docker-image-artifact-download@v1
      if: ${{ needs.setup.outputs.publish != 'true' && needs.setup.outputs.pr-publish != 'true' && needs.setup.outputs.ingestion_base_change == 'true' }}
      with:
        image: ${{ env.DATAHUB_INGESTION_BASE_IMAGE }}:${{ needs.setup.outputs.ingestion_base_change == 'true' && needs.setup.outputs.unique_tag || 'head' }}
    - name: Login to DockerHub
      uses: docker/login-action@v3
      if: ${{ needs.setup.outputs.docker-login == 'true' && needs.setup.outputs.publish == 'false' && needs.setup.outputs.pr-publish == 'false' && needs.setup.outputs.ingestion_base_change == 'false' }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Full Image
      if: ${{ needs.setup.outputs.ingestion_change == 'true' || needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
      uses: ./.github/actions/docker-custom-build-and-push
      with:
        target: final
        images: |
          ${{ env.DATAHUB_INGESTION_IMAGE }}
        build-args: |
          BASE_IMAGE=${{ env.DATAHUB_INGESTION_BASE_IMAGE }}
          DOCKER_VERSION=${{ needs.setup.outputs.ingestion_base_change == 'true' && needs.setup.outputs.unique_tag || 'head' }}
          RELEASE_VERSION=${{ needs.setup.outputs.python_release_version }}
        image_tag: ${{ needs.setup.outputs.tag }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        publish: ${{ needs.setup.outputs.publish == 'true' || needs.setup.outputs.pr-publish == 'true' }}
        context: .
        file: ./docker/datahub-ingestion/Dockerfile
        platforms: linux/amd64,linux/arm64/v8
        depot-project: ${{ vars.DEPOT_PROJECT_ID }}
    - name: Compute Tag (Full)
      id: tag
      run: echo "tag=${{ needs.setup.outputs.ingestion_change == 'true' && needs.setup.outputs.unique_tag || 'head' }}" >> "$GITHUB_OUTPUT"